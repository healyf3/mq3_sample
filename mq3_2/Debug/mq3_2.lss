
mq3_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000079a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00000860  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e44  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000906  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000180d  00000000  00000000  00002172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000524  00000000  00000000  00003980  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000074a4  00000000  00000000  00003ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000992  00000000  00000000  0000b348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  0000bcda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002ab0  00000000  00000000  0000be32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e9       	ldi	r30, 0x9A	; 154
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	0b d0       	rcall	.+22     	; 0x7e <main>
  68:	96 c3       	rjmp	.+1836   	; 0x796 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	system_init();
  74:	58 d3       	rcall	.+1712   	; 0x726 <system_init>
}
  76:	00 00       	nop
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	08 95       	ret

0000007e <main>:
#include <atmel_start.h>

int main(void)
{
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	00 d0       	rcall	.+0      	; 0x84 <main+0x6>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  88:	f1 df       	rcall	.-30     	; 0x6c <atmel_start_init>

    int a = 0;
  8a:	1a 82       	std	Y+2, r1	; 0x02
  8c:	19 82       	std	Y+1, r1	; 0x01
    
	/* Replace with your application code */
	while (1) {
        a = ADC_0_get_conversion(5);
  8e:	85 e0       	ldi	r24, 0x05	; 5
  90:	77 d0       	rcall	.+238    	; 0x180 <ADC_0_get_conversion>
  92:	9a 83       	std	Y+2, r25	; 0x02
  94:	89 83       	std	Y+1, r24	; 0x01
    }        
  96:	fb cf       	rjmp	.-10     	; 0x8e <main+0x10>

00000098 <ADC_0_init>:
 * \return Nothing
 */
void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
}
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	84 e6       	ldi	r24, 0x64	; 100
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	24 e6       	ldi	r18, 0x64	; 100
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	20 81       	ld	r18, Z
  ac:	2e 7f       	andi	r18, 0xFE	; 254
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
  b2:	8c e7       	ldi	r24, 0x7C	; 124
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
  ba:	8a e7       	ldi	r24, 0x7A	; 122
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	21 e8       	ldi	r18, 0x81	; 129
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
  c4:	8b e7       	ldi	r24, 0x7B	; 123
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <ADC_0_start_conversion>:
 * \param[in] channel The ADC channel to start conversion on
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	1f 92       	push	r1
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	89 83       	std	Y+1, r24	; 0x01
    PRR = 0 << PRADC;
  e0:	84 e6       	ldi	r24, 0x64	; 100
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	10 82       	st	Z, r1
	ADMUX &= ~0x0f;
  e8:	8c e7       	ldi	r24, 0x7C	; 124
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	2c e7       	ldi	r18, 0x7C	; 124
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	ADMUX |= channel;
  fa:	8c e7       	ldi	r24, 0x7C	; 124
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2c e7       	ldi	r18, 0x7C	; 124
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	30 81       	ld	r19, Z
 106:	29 81       	ldd	r18, Y+1	; 0x01
 108:	23 2b       	or	r18, r19
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC);
 10e:	8a e7       	ldi	r24, 0x7A	; 122
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2a e7       	ldi	r18, 0x7A	; 122
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	20 64       	ori	r18, 0x40	; 64
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
}
 120:	00 00       	nop
 122:	0f 90       	pop	r0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <ADC_0_is_conversion_done>:
 * \return The status of ADC converison done check
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	return ((ADCSRA & (1 << ADIF)));
 132:	8a e7       	ldi	r24, 0x7A	; 122
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	80 71       	andi	r24, 0x10	; 16
 140:	99 27       	eor	r25, r25
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	89 2b       	or	r24, r25
 146:	09 f4       	brne	.+2      	; 0x14a <ADC_0_is_conversion_done+0x20>
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	82 2f       	mov	r24, r18
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <ADC_0_get_conversion_result>:
 * \brief Read a conversion result from ADC_0
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
	return (ADCL | ADCH << 8);
 15a:	88 e7       	ldi	r24, 0x78	; 120
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	80 81       	ld	r24, Z
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	89 e7       	ldi	r24, 0x79	; 121
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	98 2f       	mov	r25, r24
 174:	88 27       	eor	r24, r24
 176:	82 2b       	or	r24, r18
 178:	93 2b       	or	r25, r19
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <ADC_0_get_conversion>:
 * \brief Start a conversion, wait until ready, and return the conversion result
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <ADC_0_get_conversion+0x6>
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	8b 83       	std	Y+3, r24	; 0x03
	adc_result_t res;

	ADC_0_start_conversion(channel);
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	a1 df       	rcall	.-190    	; 0xd4 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 192:	00 00       	nop
 194:	ca df       	rcall	.-108    	; 0x12a <ADC_0_is_conversion_done>
 196:	98 2f       	mov	r25, r24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	89 27       	eor	r24, r25
 19c:	88 23       	and	r24, r24
 19e:	d1 f7       	brne	.-12     	; 0x194 <ADC_0_get_conversion+0x14>
		;
	res = ADC_0_get_conversion_result();
 1a0:	d8 df       	rcall	.-80     	; 0x152 <ADC_0_get_conversion_result>
 1a2:	9a 83       	std	Y+2, r25	; 0x02
 1a4:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA |= (1 << ADIF);
 1a6:	8a e7       	ldi	r24, 0x7A	; 122
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	2a e7       	ldi	r18, 0x7A	; 122
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	f9 01       	movw	r30, r18
 1b0:	20 81       	ld	r18, Z
 1b2:	20 61       	ori	r18, 0x10	; 16
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
	return res;
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <PORTB_set_port_dir+0x6>
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	91 05       	cpc	r25, r1
 1e0:	99 f0       	breq	.+38     	; 0x208 <__DATA_REGION_LENGTH__+0x8>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	91 05       	cpc	r25, r1
 1e6:	d9 f0       	breq	.+54     	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
 1e8:	89 2b       	or	r24, r25
 1ea:	09 f0       	breq	.+2      	; 0x1ee <PORTB_set_port_dir+0x26>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
 1ec:	2f c0       	rjmp	.+94     	; 0x24c <__DATA_REGION_LENGTH__+0x4c>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
 1ee:	84 e2       	ldi	r24, 0x24	; 36
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	24 e2       	ldi	r18, 0x24	; 36
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	32 2f       	mov	r19, r18
 1fc:	29 81       	ldd	r18, Y+1	; 0x01
 1fe:	20 95       	com	r18
 200:	23 23       	and	r18, r19
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
		break;
 206:	22 c0       	rjmp	.+68     	; 0x24c <__DATA_REGION_LENGTH__+0x4c>
	case PORT_DIR_OUT:
		DDRB |= mask;
 208:	84 e2       	ldi	r24, 0x24	; 36
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	24 e2       	ldi	r18, 0x24	; 36
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	30 81       	ld	r19, Z
 214:	29 81       	ldd	r18, Y+1	; 0x01
 216:	23 2b       	or	r18, r19
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
		break;
 21c:	17 c0       	rjmp	.+46     	; 0x24c <__DATA_REGION_LENGTH__+0x4c>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 21e:	84 e2       	ldi	r24, 0x24	; 36
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	24 e2       	ldi	r18, 0x24	; 36
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	f9 01       	movw	r30, r18
 228:	20 81       	ld	r18, Z
 22a:	32 2f       	mov	r19, r18
 22c:	29 81       	ldd	r18, Y+1	; 0x01
 22e:	20 95       	com	r18
 230:	23 23       	and	r18, r19
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18

		PORTB |= mask;
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	25 e2       	ldi	r18, 0x25	; 37
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	30 81       	ld	r19, Z
 242:	29 81       	ldd	r18, Y+1	; 0x01
 244:	23 2b       	or	r18, r19
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
		break;
 24a:	00 00       	nop
	default:
		break;
	}
}
 24c:	00 00       	nop
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <PORTC_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number in PORTC
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	00 d0       	rcall	.+0      	; 0x25e <PORTC_set_pin_pull_mode+0x6>
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	89 83       	std	Y+1, r24	; 0x01
 264:	6a 83       	std	Y+2, r22	; 0x02

	if (pull_mode == PORT_PULL_UP) {
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	51 f5       	brne	.+84     	; 0x2c0 <PORTC_set_pin_pull_mode+0x68>

		DDRC &= ~(1 << pin);
 26c:	87 e2       	ldi	r24, 0x27	; 39
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	27 e2       	ldi	r18, 0x27	; 39
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	62 2f       	mov	r22, r18
 27a:	29 81       	ldd	r18, Y+1	; 0x01
 27c:	42 2f       	mov	r20, r18
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <PORTC_set_pin_pull_mode+0x32>
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	4a 95       	dec	r20
 28c:	e2 f7       	brpl	.-8      	; 0x286 <PORTC_set_pin_pull_mode+0x2e>
 28e:	20 95       	com	r18
 290:	26 23       	and	r18, r22
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18

		PORTC |= 1 << pin;
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	28 e2       	ldi	r18, 0x28	; 40
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	62 2f       	mov	r22, r18
 2a4:	29 81       	ldd	r18, Y+1	; 0x01
 2a6:	42 2f       	mov	r20, r18
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <PORTC_set_pin_pull_mode+0x5c>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	4a 95       	dec	r20
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <PORTC_set_pin_pull_mode+0x58>
 2b8:	26 2b       	or	r18, r22
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTC &= ~(1 << pin);
	}
}
 2be:	18 c0       	rjmp	.+48     	; 0x2f0 <PORTC_set_pin_pull_mode+0x98>
	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);

		PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	88 23       	and	r24, r24
 2c4:	a9 f4       	brne	.+42     	; 0x2f0 <PORTC_set_pin_pull_mode+0x98>

		PORTC &= ~(1 << pin);
 2c6:	88 e2       	ldi	r24, 0x28	; 40
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	28 e2       	ldi	r18, 0x28	; 40
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	20 81       	ld	r18, Z
 2d2:	62 2f       	mov	r22, r18
 2d4:	29 81       	ldd	r18, Y+1	; 0x01
 2d6:	42 2f       	mov	r20, r18
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <PORTC_set_pin_pull_mode+0x8c>
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	4a 95       	dec	r20
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <PORTC_set_pin_pull_mode+0x88>
 2e8:	20 95       	com	r18
 2ea:	26 23       	and	r18, r22
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
	}
}
 2f0:	00 00       	nop
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <__stack+0x3>
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	88 2f       	mov	r24, r24
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	91 05       	cpc	r25, r1
 314:	99 f0       	breq	.+38     	; 0x33c <__stack+0x3d>
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	91 05       	cpc	r25, r1
 31a:	d9 f0       	breq	.+54     	; 0x352 <__stack+0x53>
 31c:	89 2b       	or	r24, r25
 31e:	09 f0       	breq	.+2      	; 0x322 <__stack+0x23>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
 320:	2f c0       	rjmp	.+94     	; 0x380 <__stack+0x81>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
 322:	87 e2       	ldi	r24, 0x27	; 39
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	27 e2       	ldi	r18, 0x27	; 39
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	f9 01       	movw	r30, r18
 32c:	20 81       	ld	r18, Z
 32e:	32 2f       	mov	r19, r18
 330:	29 81       	ldd	r18, Y+1	; 0x01
 332:	20 95       	com	r18
 334:	23 23       	and	r18, r19
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18
		break;
 33a:	22 c0       	rjmp	.+68     	; 0x380 <__stack+0x81>
	case PORT_DIR_OUT:
		DDRC |= mask;
 33c:	87 e2       	ldi	r24, 0x27	; 39
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	27 e2       	ldi	r18, 0x27	; 39
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	f9 01       	movw	r30, r18
 346:	30 81       	ld	r19, Z
 348:	29 81       	ldd	r18, Y+1	; 0x01
 34a:	23 2b       	or	r18, r19
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
		break;
 350:	17 c0       	rjmp	.+46     	; 0x380 <__stack+0x81>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 352:	87 e2       	ldi	r24, 0x27	; 39
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	27 e2       	ldi	r18, 0x27	; 39
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	32 2f       	mov	r19, r18
 360:	29 81       	ldd	r18, Y+1	; 0x01
 362:	20 95       	com	r18
 364:	23 23       	and	r18, r19
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18

		PORTC |= mask;
 36a:	88 e2       	ldi	r24, 0x28	; 40
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	28 e2       	ldi	r18, 0x28	; 40
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	f9 01       	movw	r30, r18
 374:	30 81       	ld	r19, Z
 376:	29 81       	ldd	r18, Y+1	; 0x01
 378:	23 2b       	or	r18, r19
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
		break;
 37e:	00 00       	nop
	default:
		break;
	}
}
 380:	00 00       	nop
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <PORTD_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number in PORTD
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 d0       	rcall	.+0      	; 0x392 <PORTD_set_pin_pull_mode+0x6>
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	89 83       	std	Y+1, r24	; 0x01
 398:	6a 83       	std	Y+2, r22	; 0x02

	if (pull_mode == PORT_PULL_UP) {
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	51 f5       	brne	.+84     	; 0x3f4 <PORTD_set_pin_pull_mode+0x68>

		DDRD &= ~(1 << pin);
 3a0:	8a e2       	ldi	r24, 0x2A	; 42
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	2a e2       	ldi	r18, 0x2A	; 42
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	f9 01       	movw	r30, r18
 3aa:	20 81       	ld	r18, Z
 3ac:	62 2f       	mov	r22, r18
 3ae:	29 81       	ldd	r18, Y+1	; 0x01
 3b0:	42 2f       	mov	r20, r18
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <PORTD_set_pin_pull_mode+0x32>
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	4a 95       	dec	r20
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <PORTD_set_pin_pull_mode+0x2e>
 3c2:	20 95       	com	r18
 3c4:	26 23       	and	r18, r22
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18

		PORTD |= 1 << pin;
 3ca:	8b e2       	ldi	r24, 0x2B	; 43
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	2b e2       	ldi	r18, 0x2B	; 43
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	62 2f       	mov	r22, r18
 3d8:	29 81       	ldd	r18, Y+1	; 0x01
 3da:	42 2f       	mov	r20, r18
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <PORTD_set_pin_pull_mode+0x5c>
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	4a 95       	dec	r20
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <PORTD_set_pin_pull_mode+0x58>
 3ec:	26 2b       	or	r18, r22
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
	}
}
 3f2:	18 c0       	rjmp	.+48     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	if (pull_mode == PORT_PULL_UP) {

		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	88 23       	and	r24, r24
 3f8:	a9 f4       	brne	.+42     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

		PORTD &= ~(1 << pin);
 3fa:	8b e2       	ldi	r24, 0x2B	; 43
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	2b e2       	ldi	r18, 0x2B	; 43
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	f9 01       	movw	r30, r18
 404:	20 81       	ld	r18, Z
 406:	62 2f       	mov	r22, r18
 408:	29 81       	ldd	r18, Y+1	; 0x01
 40a:	42 2f       	mov	r20, r18
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	4a 95       	dec	r20
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	20 95       	com	r18
 41e:	26 23       	and	r18, r22
 420:	fc 01       	movw	r30, r24
 422:	20 83       	st	Z, r18
	}
}
 424:	00 00       	nop
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <PORTD_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 d0       	rcall	.+0      	; 0x436 <PORTD_set_port_dir+0x6>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	89 83       	std	Y+1, r24	; 0x01
 43c:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	88 2f       	mov	r24, r24
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	91 05       	cpc	r25, r1
 448:	99 f0       	breq	.+38     	; 0x470 <PORTD_set_port_dir+0x40>
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	91 05       	cpc	r25, r1
 44e:	d9 f0       	breq	.+54     	; 0x486 <PORTD_set_port_dir+0x56>
 450:	89 2b       	or	r24, r25
 452:	09 f0       	breq	.+2      	; 0x456 <PORTD_set_port_dir+0x26>
		DDRD &= ~mask;

		PORTD |= mask;
		break;
	default:
		break;
 454:	2f c0       	rjmp	.+94     	; 0x4b4 <PORTD_set_port_dir+0x84>
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~mask;
 456:	8a e2       	ldi	r24, 0x2A	; 42
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	2a e2       	ldi	r18, 0x2A	; 42
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	f9 01       	movw	r30, r18
 460:	20 81       	ld	r18, Z
 462:	32 2f       	mov	r19, r18
 464:	29 81       	ldd	r18, Y+1	; 0x01
 466:	20 95       	com	r18
 468:	23 23       	and	r18, r19
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
		break;
 46e:	22 c0       	rjmp	.+68     	; 0x4b4 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRD |= mask;
 470:	8a e2       	ldi	r24, 0x2A	; 42
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	2a e2       	ldi	r18, 0x2A	; 42
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	f9 01       	movw	r30, r18
 47a:	30 81       	ld	r19, Z
 47c:	29 81       	ldd	r18, Y+1	; 0x01
 47e:	23 2b       	or	r18, r19
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
		break;
 484:	17 c0       	rjmp	.+46     	; 0x4b4 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 486:	8a e2       	ldi	r24, 0x2A	; 42
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	2a e2       	ldi	r18, 0x2A	; 42
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	f9 01       	movw	r30, r18
 490:	20 81       	ld	r18, Z
 492:	32 2f       	mov	r19, r18
 494:	29 81       	ldd	r18, Y+1	; 0x01
 496:	20 95       	com	r18
 498:	23 23       	and	r18, r19
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18

		PORTD |= mask;
 49e:	8b e2       	ldi	r24, 0x2B	; 43
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	2b e2       	ldi	r18, 0x2B	; 43
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	f9 01       	movw	r30, r18
 4a8:	30 81       	ld	r19, Z
 4aa:	29 81       	ldd	r18, Y+1	; 0x01
 4ac:	23 2b       	or	r18, r19
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
		break;
 4b2:	00 00       	nop
	default:
		break;
	}
}
 4b4:	00 00       	nop
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <PORTD_set_pin_dir+0x6>
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	89 83       	std	Y+1, r24	; 0x01
 4cc:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	91 05       	cpc	r25, r1
 4d8:	e1 f0       	breq	.+56     	; 0x512 <PORTD_set_pin_dir+0x52>
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	91 05       	cpc	r25, r1
 4de:	71 f1       	breq	.+92     	; 0x53c <PORTD_set_pin_dir+0x7c>
 4e0:	89 2b       	or	r24, r25
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <PORTD_set_pin_dir+0x26>
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
		break;
	default:
		break;
 4e4:	55 c0       	rjmp	.+170    	; 0x590 <PORTD_set_pin_dir+0xd0>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 4e6:	8a e2       	ldi	r24, 0x2A	; 42
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	2a e2       	ldi	r18, 0x2A	; 42
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	62 2f       	mov	r22, r18
 4f4:	29 81       	ldd	r18, Y+1	; 0x01
 4f6:	42 2f       	mov	r20, r18
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <PORTD_set_pin_dir+0x44>
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	4a 95       	dec	r20
 506:	e2 f7       	brpl	.-8      	; 0x500 <PORTD_set_pin_dir+0x40>
 508:	20 95       	com	r18
 50a:	26 23       	and	r18, r22
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
		break;
 510:	3f c0       	rjmp	.+126    	; 0x590 <PORTD_set_pin_dir+0xd0>
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 512:	8a e2       	ldi	r24, 0x2A	; 42
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	2a e2       	ldi	r18, 0x2A	; 42
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	f9 01       	movw	r30, r18
 51c:	20 81       	ld	r18, Z
 51e:	62 2f       	mov	r22, r18
 520:	29 81       	ldd	r18, Y+1	; 0x01
 522:	42 2f       	mov	r20, r18
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <PORTD_set_pin_dir+0x70>
 52c:	22 0f       	add	r18, r18
 52e:	33 1f       	adc	r19, r19
 530:	4a 95       	dec	r20
 532:	e2 f7       	brpl	.-8      	; 0x52c <PORTD_set_pin_dir+0x6c>
 534:	26 2b       	or	r18, r22
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18
		break;
 53a:	2a c0       	rjmp	.+84     	; 0x590 <PORTD_set_pin_dir+0xd0>
	case PORT_DIR_OFF:
		DDRD &= ~(1 << pin);
 53c:	8a e2       	ldi	r24, 0x2A	; 42
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	2a e2       	ldi	r18, 0x2A	; 42
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	f9 01       	movw	r30, r18
 546:	20 81       	ld	r18, Z
 548:	62 2f       	mov	r22, r18
 54a:	29 81       	ldd	r18, Y+1	; 0x01
 54c:	42 2f       	mov	r20, r18
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <PORTD_set_pin_dir+0x9a>
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	4a 95       	dec	r20
 55c:	e2 f7       	brpl	.-8      	; 0x556 <PORTD_set_pin_dir+0x96>
 55e:	20 95       	com	r18
 560:	26 23       	and	r18, r22
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18

		PORTD |= 1 << pin;
 566:	8b e2       	ldi	r24, 0x2B	; 43
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	2b e2       	ldi	r18, 0x2B	; 43
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	f9 01       	movw	r30, r18
 570:	20 81       	ld	r18, Z
 572:	62 2f       	mov	r22, r18
 574:	29 81       	ldd	r18, Y+1	; 0x01
 576:	42 2f       	mov	r20, r18
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <PORTD_set_pin_dir+0xc4>
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	4a 95       	dec	r20
 586:	e2 f7       	brpl	.-8      	; 0x580 <PORTD_set_pin_dir+0xc0>
 588:	26 2b       	or	r18, r22
 58a:	fc 01       	movw	r30, r24
 58c:	20 83       	st	Z, r18
		break;
 58e:	00 00       	nop
	default:
		break;
	}
}
 590:	00 00       	nop
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <PORTD_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	00 d0       	rcall	.+0      	; 0x5a2 <PORTD_set_pin_level+0x6>
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
 5a6:	89 83       	std	Y+1, r24	; 0x01
 5a8:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	88 23       	and	r24, r24
 5ae:	a9 f0       	breq	.+42     	; 0x5da <PORTD_set_pin_level+0x3e>
		PORTD |= 1 << pin;
 5b0:	8b e2       	ldi	r24, 0x2B	; 43
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	2b e2       	ldi	r18, 0x2B	; 43
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	62 2f       	mov	r22, r18
 5be:	29 81       	ldd	r18, Y+1	; 0x01
 5c0:	42 2f       	mov	r20, r18
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	21 e0       	ldi	r18, 0x01	; 1
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <PORTD_set_pin_level+0x32>
 5ca:	22 0f       	add	r18, r18
 5cc:	33 1f       	adc	r19, r19
 5ce:	4a 95       	dec	r20
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <PORTD_set_pin_level+0x2e>
 5d2:	26 2b       	or	r18, r22
 5d4:	fc 01       	movw	r30, r24
 5d6:	20 83       	st	Z, r18
	} else {
		PORTD &= ~(1 << pin);
	}
}
 5d8:	15 c0       	rjmp	.+42     	; 0x604 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 5da:	8b e2       	ldi	r24, 0x2B	; 43
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	2b e2       	ldi	r18, 0x2B	; 43
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	f9 01       	movw	r30, r18
 5e4:	20 81       	ld	r18, Z
 5e6:	62 2f       	mov	r22, r18
 5e8:	29 81       	ldd	r18, Y+1	; 0x01
 5ea:	42 2f       	mov	r20, r18
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	21 e0       	ldi	r18, 0x01	; 1
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <PORTD_set_pin_level+0x5c>
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	4a 95       	dec	r20
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <PORTD_set_pin_level+0x58>
 5fc:	20 95       	com	r18
 5fe:	26 23       	and	r18, r22
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
	}
}
 604:	00 00       	nop
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <ana_in_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void ana_in_set_pull_mode(const enum port_pull_mode pull_mode)
{
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	1f 92       	push	r1
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_pull_mode(5, pull_mode);
 61c:	69 81       	ldd	r22, Y+1	; 0x01
 61e:	85 e0       	ldi	r24, 0x05	; 5
 620:	1b de       	rcall	.-970    	; 0x258 <PORTC_set_pin_pull_mode>
}
 622:	00 00       	nop
 624:	0f 90       	pop	r0
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	08 95       	ret

0000062c <PD0_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD0_set_pull_mode(const enum port_pull_mode pull_mode)
{
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	1f 92       	push	r1
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(0, pull_mode);
 638:	69 81       	ldd	r22, Y+1	; 0x01
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	a7 de       	rcall	.-690    	; 0x38c <PORTD_set_pin_pull_mode>
}
 63e:	00 00       	nop
 640:	0f 90       	pop	r0
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <PD0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PD0_set_dir(const enum port_dir dir)
{
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	1f 92       	push	r1
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
 654:	69 81       	ldd	r22, Y+1	; 0x01
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	33 df       	rcall	.-410    	; 0x4c0 <PORTD_set_pin_dir>
}
 65a:	00 00       	nop
 65c:	0f 90       	pop	r0
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <PD1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PD1_set_dir(const enum port_dir dir)
{
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	1f 92       	push	r1
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62
 66e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
 670:	69 81       	ldd	r22, Y+1	; 0x01
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	25 df       	rcall	.-438    	; 0x4c0 <PORTD_set_pin_dir>
}
 676:	00 00       	nop
 678:	0f 90       	pop	r0
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <PD1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PD1_set_level(const bool level)
{
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	1f 92       	push	r1
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
 68a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 68c:	69 81       	ldd	r22, Y+1	; 0x01
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	85 df       	rcall	.-246    	; 0x59c <PORTD_set_pin_level>
}
 692:	00 00       	nop
 694:	0f 90       	pop	r0
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	08 95       	ret

0000069c <sysctrl_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	60 e8       	ldi	r22, 0x80	; 128
 6a8:	81 e6       	ldi	r24, 0x61	; 97
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	4a d0       	rcall	.+148    	; 0x742 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 6ae:	83 e5       	ldi	r24, 0x53	; 83
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	fc 01       	movw	r30, r24
 6b4:	10 82       	st	Z, r1
	       (0 << SE);

	MCUCR = (0 << PUD);
 6b6:	85 e5       	ldi	r24, 0x55	; 85
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	fc 01       	movw	r30, r24
 6bc:	10 82       	st	Z, r1

	return 0;
 6be:	80 e0       	ldi	r24, 0x00	; 0
}
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <mcu_init>:
#define MCU_RESET_CAUSE_EXT (1 << EXTRF)
#define MCU_RESET_CAUSE_BOR (1 << BORF)
#define MCU_RESET_CAUSE_WDT (1 << WDRF)

static inline void mcu_init(void)
{
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	cd b7       	in	r28, 0x3d	; 61
 6cc:	de b7       	in	r29, 0x3e	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	//PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
    // Don't disable SPI for debugging.
	PRR = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 6ce:	84 e6       	ldi	r24, 0x64	; 100
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	2b ee       	ldi	r18, 0xEB	; 235
 6d4:	fc 01       	movw	r30, r24
 6d6:	20 83       	st	Z, r18

	/* Set all pins to low power mode */
	PORTB_set_port_dir(0xff, PORT_DIR_OFF);
 6d8:	62 e0       	ldi	r22, 0x02	; 2
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	75 dd       	rcall	.-1302   	; 0x1c8 <PORTB_set_port_dir>
	PORTC_set_port_dir(0x7f, PORT_DIR_OFF);
 6de:	62 e0       	ldi	r22, 0x02	; 2
 6e0:	8f e7       	ldi	r24, 0x7F	; 127
 6e2:	0c de       	rcall	.-1000   	; 0x2fc <PORTC_set_port_dir>
	PORTD_set_port_dir(0xff, PORT_DIR_OFF);
 6e4:	62 e0       	ldi	r22, 0x02	; 2
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	a3 de       	rcall	.-698    	; 0x430 <PORTD_set_port_dir>
}
 6ea:	00 00       	nop
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <ADC_0_initialization>:
#include "driver_init.h"
#include <system.h>

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62

	ADC_0_init();
 6fa:	ce dc       	rcall	.-1636   	; 0x98 <ADC_0_init>
}
 6fc:	00 00       	nop
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <USART_0_initialization>:

/* configure pins and initialize registers */
void USART_0_initialization(void)
{
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PD0_set_dir(PORT_DIR_IN);
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	9c df       	rcall	.-200    	; 0x648 <PD0_set_dir>

	PD0_set_pull_mode(
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	8c df       	rcall	.-232    	; 0x62c <PD0_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output
	PD1_set_dir(PORT_DIR_OUT);
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	a6 df       	rcall	.-180    	; 0x664 <PD1_set_dir>

	PD1_set_level(
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	b2 df       	rcall	.-156    	; 0x680 <PD1_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 71c:	19 d0       	rcall	.+50     	; 0x750 <USART_0_init>
}
 71e:	00 00       	nop
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 72e:	cb df       	rcall	.-106    	; 0x6c6 <mcu_init>

	/* PORT setting on PC5 */

	// Disable pull-up.
	ana_in_set_pull_mode(PORT_PULL_OFF);
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	6e df       	rcall	.-292    	; 0x610 <ana_in_set_pull_mode>

	sysctrl_init();
 734:	b3 df       	rcall	.-154    	; 0x69c <sysctrl_init>

	ADC_0_initialization();
 736:	dd df       	rcall	.-70     	; 0x6f2 <ADC_0_initialization>

	USART_0_initialization();
 738:	e5 df       	rcall	.-54     	; 0x704 <USART_0_initialization>
}
 73a:	00 00       	nop
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	08 95       	ret

00000742 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 742:	2f b7       	in	r18, 0x3f	; 63
	cli
 744:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 746:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 748:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 74a:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 74c:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 74e:	08 95       	ret

00000750 <USART_0_init>:
 * \return Initialization status.
 * \retval 0 the USART init was successful
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62

	// Module is in UART mode

	/* Enable USART0 */
	PRR &= ~(1 << PRUSART0);
 758:	84 e6       	ldi	r24, 0x64	; 100
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	24 e6       	ldi	r18, 0x64	; 100
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	f9 01       	movw	r30, r18
 762:	20 81       	ld	r18, Z
 764:	2d 7f       	andi	r18, 0xFD	; 253
 766:	fc 01       	movw	r30, r24
 768:	20 83       	st	Z, r18

#define BAUD 9600

#include <utils/setbaud.h>

	UBRR0H = UBRRH_VALUE;
 76a:	85 ec       	ldi	r24, 0xC5	; 197
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	fc 01       	movw	r30, r24
 770:	10 82       	st	Z, r1
	UBRR0L = UBRRL_VALUE;
 772:	84 ec       	ldi	r24, 0xC4	; 196
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	23 e3       	ldi	r18, 0x33	; 51
 778:	fc 01       	movw	r30, r24
 77a:	20 83       	st	Z, r18

	UCSR0A = USE_2X << U2X0 /*  */
 77c:	80 ec       	ldi	r24, 0xC0	; 192
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	fc 01       	movw	r30, r24
 782:	10 82       	st	Z, r1
	         | 0 << MPCM0;  /* Multi-processor Communication Mode: disabled */

	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
 784:	81 ec       	ldi	r24, 0xC1	; 193
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	28 e9       	ldi	r18, 0x98	; 152
 78a:	fc 01       	movw	r30, r24
 78c:	20 83       	st	Z, r18
	// UCSR0C = (0 << UMSEL01) | (0 << UMSEL00) /*  */
	//		 | (0 << UPM01) | (0 << UPM00) /* Disabled */
	//		 | 0 << USBS0 /* USART Stop Bit Select: disabled */
	//		 | (1 << UCSZ01) | (1 << UCSZ00); /* 8-bit */

	return 0;
 78e:	80 e0       	ldi	r24, 0x00	; 0
}
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <_exit>:
 796:	f8 94       	cli

00000798 <__stop_program>:
 798:	ff cf       	rjmp	.-2      	; 0x798 <__stop_program>
